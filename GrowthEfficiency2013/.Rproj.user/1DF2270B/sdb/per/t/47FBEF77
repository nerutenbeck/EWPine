{
    "contents" : "###########################################################\n###\n### White Pine Growth Efficiecy Over Time\n### Nathan E. Rutenbeck\n### University of Maine School of Forest Resources\n### 2013\n###\n###########################################################\n\n\nlibrary(R2jags)\nlibrary(MCMCpack)\n\n########## Bayesian fit for the simple diameter model. Eventually I'd like to try it with the full model\n# I went through a couple iterations of this model fitting, and finally\n# had to scale the variables and model the correlation with the inverse Wishart distribution to get it\n# to converge properly.\n\nDBH.jm<-function(){\n  for (i in 1:n){\n    y[i]~dnorm(yhat[i],tau.y)\n    yhat[i]<-a[treeid[i]]+b[treeid[i]]*x[i]    \n  }\n  tau.y<-pow(sigma.y,-2)\n  sigma.y~dunif(0,100)\n  \n  for(j in 1:J){\n    a[j]<-xi.a*B.raw[j,1] \n    b[j]<-xi.b*B.raw[j,2]\n    B.raw[j,1:2]~dmnorm(B.raw.hat[j,],Tau.B.raw[,])\n    B.raw.hat[j,1]<-mu.a.raw\n    B.raw.hat[j,2]<-mu.b.raw\n  }\n  mu.a<-xi.a*mu.a.raw # scaled mean slope\n  mu.b<-xi.b*mu.b.raw # scaled mean slope\n  mu.a.raw~dnorm(0,0.0001) # raw mean for intercepts\n  mu.b.raw~dnorm(0,0.0001) # raw mean for slopes\n  \n  xi.a~dunif(0,100) # Scaling parameters\n  xi.b~dunif(0,100)\n  \n  Tau.B.raw[1:2,1:2]~dwish(W[,],df) # modeling Tau directly with the Wishart distribution\n  df<-3 # degrees of freedom for the distribution of Tau.B.raw\n  \n  Sigma.B.raw[1:2,1:2]<-inverse(Tau.B.raw[,]) # Calculating raw sigmas\n  sigma.a<-xi.a*sqrt(Sigma.B.raw[1,1]) # caluculating scaled standard deviations for the intercepts\n  sigma.b<-xi.b*sqrt(Sigma.B.raw[2,2]) # calculating scaled standard deviations for the slopes\n  rho<-Sigma.B.raw[1,2]/sqrt(Sigma.B.raw[1,1]*Sigma.B.raw[2,2]) # Correlation\n}\n\ndbh.prep<-orderBy(~treeid,data=na.omit(trees.both[,c(12,8,17)]))\nhead(dbh.prep)\n\ndbh.dat<-with(dbh.prep,list(n=nrow(dbh.prep),\n                            J=length(unique(treeid)),\n                            y=DBH,\n                            x=DIB, # This makes the model not converge... Need to scale\n                            #x=scale(DIB,scale=T)[,1], # No convergence by just subt. mean...\n                            treeid=as.numeric(unclass(as.factor(treeid))),\n                            W=diag(2)))\nstr(dbh.dat)\ndbh.inits<-function(){\n  list(B.raw=array(rnorm(2*540),c(540,2)), # This is a Jx2 matrix of rnorm samples\n       mu.a.raw=rnorm(1),\n       mu.b.raw=rnorm(1),\n       sigma.y=runif(1),\n       Tau.B.raw=rwish(3,diag(2)), # rwish() from the MCMCpack package\n       xi.a=runif(1),\n       xi.b=runif(1))\n}\n\ndbh.params<-c('a','b','mu.a','mu.b','sigma.a','sigma.b','sigma.y','rho')\n\ndbh.fit<-jags(data=dbh.dat,inits=dbh.inits,dbh.params,model.file=DBH.jm,n.iter=500)\nprint(dbh.fit)\n\nmax(dbh.fit$BUGSoutput$summary[,8]) # Max Rhat - should be below 1.1 \n\ndbh.upd<-update(dbh.fit,n.iter=1000) # If convergence is problematic\n\nstr(dbh.fit)\n\ndbh.jagscoefs<-list(mean=dbh.fit$BUGSoutput$mean,sd=dbh.fit$BUGSoutput$sd,median=dbh.fit$BUGSoutput$median)\nstr(dbh.jagscoefs)\ndbh.jagscoefs$mean\n\n### Try the more complex model. As of the end of the term, this still doesn't work.\n\nDBH.jm2<-function(){\n  for (i in 1:n){\n    y[i]~dnorm(yhat[i],tau.y)\n    yhat[i]<-a[treeid[i]]+b[treeid[i]]*DIB[i]+c[treeid[i]]*ht[i]+d[treeid[i]]*age[i]    \n  }\n  tau.y<-pow(sigma.y,-2)\n  sigma.y~dunif(0,100)\n  \n  for(j in 1:J){\n    a[j]<-xi.a*B.raw[j,1] \n    b[j]<-xi.b*B.raw[j,2]\n    c[j]<-xi.c*B.raw[j,3]\n    d[j]<-xi.d*B.raw[j,4]\n    B.raw[j,1:4]~dmnorm(B.raw.hat[j,],Tau.B.raw[,])\n    B.raw.hat[j,1]<-mu.a.raw\n    B.raw.hat[j,2]<-mu.b.raw\n    B.raw.hat[j,3]<-mu.c.raw\n    B.raw.hat[j,4]<-mu.d.raw\n  }\n  mu.a<-xi.a*mu.a.raw \n  mu.b<-xi.b*mu.b.raw \n  mu.c<-xi.c*mu.c.raw\n  mu.d<-xi.d*mu.c.raw\n  mu.a.raw~dnorm(0,0.0001) \n  mu.b.raw~dnorm(0,0.0001) \n  mu.c.raw~dnorm(0,0.0001)\n  mu.d.raw~dnorm(0,0.0001)\n  \n  xi.a~dunif(0,100) \n  xi.b~dunif(0,100)\n  xi.c~dunif(0,100)\n  xi.d~dunif(0,100)\n  \n  Tau.B.raw[1:4,1:4]~dwish(W[,],df) \n  df<-5 \n  \n  Sigma.B.raw[1:4,1:4]<-inverse(Tau.B.raw[,]) \n  sigma.a<-xi.a*sqrt(Sigma.B.raw[1,1]) \n  sigma.b<-xi.b*sqrt(Sigma.B.raw[2,2]) \n  sigma.c<-xi.c*sqrt(Sigma.B.raw[3,3])\n  sigma.d<-xi.d*sqrt(Sigma.B.raw[4,4])\n  \n  rho.ab<-Sigma.B.raw[1,2]/sqrt(Sigma.B.raw[1,1]*Sigma.B.raw[2,2]) \n  rho.ac<-Sigma.B.raw[1,3]/sqrt(Sigma.B.raw[1,1]*Sigma.B.raw[3,3])\n  rho.ad<-Sigma.B.raw[1,4]/sqrt(Sigma.B.raw[1,1]*Sigma.B.raw[4,4])\n  rho.bc<-Sigma.B.raw[2,3]/sqrt(Sigma.B.raw[2,2]*Sigma.B.raw[3,3])\n  rho.bd<-Sigma.B.raw[2,4]/sqrt(Sigma.B.raw[2,2]*Sigma.B.raw[4,4])\n  rho.cd<-Sigma.B.raw[3,4]/sqrt(Sigma.B.raw[3,3]*Sigma.B.raw[4,4])\n}\n\ndbh.prep2<-orderBy(~treeid,data=na.omit(trees.both[,c(12,8,11,13,17)]))\nhead(dbh.prep2)\n\ndbh.dat2<-with(dbh.prep2,list(n=nrow(dbh.prep2),\n                              J=length(unique(treeid)),\n                              y=DBH,\n                              DIB=scale(DIB)[,1],\n                              ht=scale(ht)[,1],\n                              age=scale(age)[,1],\n                              treeid=as.numeric(unclass(as.factor(treeid))),\n                              W=diag(4)))\nstr(dbh.dat2)\ndbh.inits2<-function(){\n  list(B.raw=array(rnorm(4*540),c(540,4)), # This is a Jx2 matrix of rnorm samples\n       mu.a.raw=rnorm(1),\n       mu.b.raw=rnorm(1),\n       mu.c.raw~rnorm(1),\n       mu.d.raw~rnorm(1),\n       sigma.y=runif(1),\n       Tau.B.raw=rwish(5,diag(4)), # rwish() from the MCMCpack package\n       xi.a=runif(1),\n       xi.b=runif(1),\n       xi.c=runif(1),\n       xi.d=runif(1))\n}\n\ndbh.params2<-c('mu.a','mu.b','mu.c','mu.d','sigma.a','sigma.b','sigma.c','sigma.d','sigma.y',\n               'rho.ab','rho.ac','rho.ad','rho.bc','rho.bd','rho.cd')\n\n# This still doesn't fit for some reason. Something wrong with the initialization?\n\ndbh.fit2<-jags(data=dbh.dat2,inits=dbh.inits2,dbh.params2,model.file=DBH.jm2,n.iter=50)\n\n# After all that, I have to say that you gotta love lmer()....\n",
    "created" : 1380807168496.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2072663626",
    "id" : "47FBEF77",
    "lastKnownWriteTime" : 1380808440,
    "path" : "~/research/WP/WP_GE/bayes_models.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}